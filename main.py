import os
import schedule
import time
from dotenv import load_dotenv
from twilio.rest import Client
from openai import OpenAI
from keep_alive import keep_alive
from datetime import datetime

# Cargar variables desde el archivo .env
load_dotenv()

# Configuraci√≥n de Twilio
account_sid = os.getenv('ACCOUNT_SID')
auth_token = os.getenv('AUTH_TOKEN')
twilio_number = 'whatsapp:+14155238886'
destinatarios = os.getenv('NUMEROS').split(',')
client_twilio = Client(account_sid, auth_token)

# Configuraci√≥n de OpenAI
client_openai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Funci√≥n para generar mensaje
def generar_mensaje_tda():
    dias = ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"]
    meses = ["enero", "febrero", "marzo", "abril", "mayo", "junio",
             "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
    hoy = datetime.now()
    fecha = f"{dias[hoy.weekday()]} {hoy.day} de {meses[hoy.month - 1]}"

    prompt = (
        "Act√∫a como un especialista en neurodiversidad y TDA (Trastorno por D√©ficit de Atenci√≥n, sin hiperactividad). escribe un mensaje breve (m√°ximo 3 l√≠neas) en espa√±ol que sea educativo, emp√°tico y aporte un consejo, dato curioso o reflexi√≥n sobre el TDA en adultos.  El mensaje debe estar dirigido a una pareja adulta que est√° aprendiendo juntos sobre c√≥mo afecta el TDA en la vida diaria: relaciones, trabajo, emociones, comunicaci√≥n, autoestima y autocuidado. Usa un lenguaje c√°lido, sencillo y motivador. Var√≠a el tipo de contenido: algunos d√≠as da un consejo pr√°ctico, otros d√≠as una curiosidad cient√≠fica, una estrategia emocional, una reflexi√≥n positiva o una met√°fora alentadora. Evita repetir frases de d√≠as anteriores. No menciones ni confundas con TDAH. El tono debe ser humano, cercano y adaptado a una comunicaci√≥n diaria breve y valiosa. No introduzcas saludos ni despedidas, simplemente entrega el contenido principal directamente."
      
    )

    try:
        response = client_openai.chat.completions.create(
            model="gpt-4o",  # Usa gpt-4o para mejor variedad y calidez
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100,
            temperature=0.8
        )
        contenido = response.choices[0].message.content.strip()

        mensaje_completo = (
            f"üìÖ *{fecha} ‚Äì Frase del d√≠a sobre TDA:*\n\n"
            f"{contenido}\n\n"
            "üß† Siempre se aprende algo nuevo."
        )
        return mensaje_completo
    except Exception as e:
        print(f"‚ùå Error generando mensaje con OpenAI: {e}")
        return "Hoy hubo un error generando el mensaje sobre TDA. Intenta nuevamente m√°s tarde."

# Funci√≥n para enviar mensaje
def enviar_mensaje():
    print("üß† Enviando mensaje...")
    mensaje = generar_mensaje_tda()
    for numero in destinatarios:
        try:
            numero = numero.strip()
            message = client_twilio.messages.create(
                body=mensaje,
                from_=twilio_number,
                to=f'whatsapp:{numero}'
            )
            print(f"‚úÖ Mensaje enviado a {numero}: {message.sid}")
        except Exception as e:
            print(f"‚ùå Error al enviar a {numero}: {e}")

# Mantener vivo el servidor para UptimeRobot
keep_alive()

# Ajuste de hora: Replit corre en UTC, Chile est√° en UTC-4
# Si quieres que se mande a las 09:00 hora Chile ‚Üí usar 13:00 UTC
schedule.every().day.at("00:08").do(enviar_mensaje)


# Bucle principal
while True:
    schedule.run_pending()
    print(f"üîÑ Verificando a las {datetime.utcnow()} UTC")
    time.sleep(10)
